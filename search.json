[{"title":"Speculation on forex","url":"/2022/04/17/Speculation_on_forex/","content":"**Speculation on forex**\n> Editing\n\n#### Why Forex\n1. It is a huge market, No one can manipulate it\n2. The source and signal is open and public\n3. It got low entry barriers, you can buy or sell 0.01 lot with 1 dollar\n\n\n","tags":["Fun"]},{"title":"6S081 Study Notes","url":"/2022/02/01/6S081/","content":"#  Introduction && Link:\nIt is a Note about The MIT course 6.S081. arranged by following it's lab order\nhttps://pdos.csail.mit.edu/6.S081/2021/index.html\nhttps://pdos.csail.mit.edu/6.S081/2021/labs/util.html\n\n# Lab1 Utilities\n## Key Points\n1. The kernel uses the hardware protection mechanisms to ensure that each process executing user space can access only its own memory\n2. Fork creates a new process, called the child process, with exactly the same memory contents as the calling process\n\n\n### pingpong\n- what is the difference of two code block\n```\nint fd[2];\npid=fork();\npipe(fd);\n```\n```\npid=fork();\nint fd[2];\npipe(fd);\n```\n all have 4 fd genereated\nbut the first one two process's fd have no connection.\nand the second one has\n\n- remember to exit at every child process, otherwise it will execute the code below\n\n### xargs\n- what is char* a[10]?\n> format a =  {char* char* .... char*}\n- exec(command, argv)\n > the argv[0] should be not be filled with parameter but with command name\n- there are two types format: \"123\\n456\" and 123 456, how we deal with it.\n> we can devide with space of \\n and treate \" as one of the char, delete it at the last step\n- we should clear all the uninitial string otherwise we will get random value like \"\\\" which will cause a lot of confusion to us\n![random value](/img/1650726024.png)\n- if you wanna pass char par[10][10] as a parameter in function you should write prototype like below\n> func(char * par[10][10]), that means you should write out the dimension of it\n- what is the difference \n> char *par[] = {}; char * par[10] = {}; char *par[10],  the former two are empty array, the last one is the right defination\n- why we should fork and call exec \n> exec system call will replace the the calling process, that is why\n- what is the difference between strlen and sizeof\npls Do use sizeof with memset\n- we can compare char with == but we should compare string by using strcmp\n- \"\" is a string '' is a char\n- how to use pointer array properly\n```\n    char *pass_par[10]; \n    char * test = \"xargs\";\n    pass_par[0] = test;\n    printf(\"%s\\n\", pass_par[0]);\n \n```\n\n# Lab2 System calls\n## Mode\n> mode\n\nMachine\nmode is mostly intended for configuring a computer\n\nsupervisor mode is for executing privileged instructions: for example, enabling and disabling interrupts, reading and writing the register that holds the address of a page\ntable\n\nCPUs provide a special instruction that switches the CPU from user mode\nto supervisor mode. (RISC-V provides\nthe ecall)\n\nxv6 is monolithic kernel, with all kernel in one mode\n\n> Kernel\n\nthe hardware only uses the low 39 bits when looking up virtual addresses in page tables; and\nxv6 only uses 38 of those 39 bits. Thus, the maximum address is 2\n38 − 1 = 0x3fffffffff\n\nEach process has two stacks: a user stack and a kernel stack\n\nIn Entry.S it's _entry set up a stack so that xv6 can run C code start.c\n\n### System call tracing\nPreparation:\n1. read at least twice the instructions\n2. add print command to check the execute order of each function\n3. you can check how the kill pass all the argument\n\nNote:\n1. The most important part is how to pass the argument to the system call\n2. To read the document, you will know the argument is stored in which Register, and you can use function argint\nto \"Fetch the nth 32-bit system call argument\"\n\n### Sysinfo \nPreparation:\n1. the trick part about the compilation is pls use sys_sysinfo instead of sys_info\n2. A process’s most important pieces of kernel state are its page table, its kernel\nstack, and its run state.\n3. sysinfotest -> kernel/sysproc.c -> kernel/kalloc*proc\n\nNote:\n1. The most important part is to understand the function copyout\n2. for counting proc, we should caculate all the proc that not in UNUSED mode\n3. for counting mem, we should times the page size\n\n# Lab3  Page Table\nNote:\n1. VA and PA is translated by map\n2. MMU won't store any map\n3. kernel will write the map value into the satp register\n4. page is 4 $B in the Risk V\n5. for satp, it is divided into three pieces 25+27+12, 12 is the byte within the page, index is for the map to translate to physical page\n","tags":["Linux","System","OS"]},{"title":"Common Weakness","url":"/2020/02/21/Common_Weakness/","content":"# Common Weakness\n> Editing\n\n### Input validation\nIf we don't validate input properly, Hacker can alter control flow,  change the code execution, or get the Important file informations\n\ne.g:\n[CWE-790][1]\n[CWE-116][2]\n[CWE-138][3]\n\n[1]: https://cwe.mitre.org/data/definitions/790.html\n[2]: https://cwe.mitre.org/data/definitions/116.html\n[3]: https://cwe.mitre.org/data/definitions/138.html\n\n### Defense\n1. Consider all the aspect:Value Type /  Length / Format / Expired Time / Effect Scope and so on\n2. Assume all input is malicious, Only accept the thing that we know, That means we only set the whiltlist\n","tags":["Security"]},{"title":"Born","url":"/2000/01/01/Born/","content":"**Simple Introduction**\n\n#### Initial\n\"Right at this moment, I was born\" -- Millennium Bug","tags":["Fun"]}]