<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>(self)</title>
  <icon>https://www.gravatar.com/avatar/cf5cad9b475fccd28fe9f0824327bc49</icon>
  <subtitle>WWVzLCBpdCBpcyBCYXNlNjQgZW5jb2Rl</subtitle>
  <link href="https://presentzeng.github.io/atom.xml" rel="self"/>
  
  <link href="https://presentzeng.github.io/"/>
  <updated>2022-07-18T10:32:35.244Z</updated>
  <id>https://presentzeng.github.io/</id>
  
  <author>
    <name>Presentzeng</name>
    <email>presentzeng@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>外汇投机指南</title>
    <link href="https://presentzeng.github.io/2022/04/17/Speculation_on_forex/"/>
    <id>https://presentzeng.github.io/2022/04/17/Speculation_on_forex/</id>
    <published>2022-04-16T16:00:00.000Z</published>
    <updated>2022-07-18T10:32:35.244Z</updated>
    
    <content type="html"><![CDATA[<p><strong>外汇投机指南</strong></p><blockquote><p>Editing</p></blockquote><h4 id="为什么选外汇"><a href="#为什么选外汇" class="headerlink" title="为什么选外汇"></a>为什么选外汇</h4><ol><li>它超级大盘，EURUSD这种货币对几乎无人能操纵</li><li>外汇的信息获取非常充足</li><li>极小的入市成本，0.01手，一美金都能做交易</li></ol><h4 id="平台和工具"><a href="#平台和工具" class="headerlink" title="平台和工具"></a>平台和工具</h4><ul><li>Python 3.8.8</li><li>MetaTrade5</li><li>MetaTrade的Python Module</li><li>一个外汇佣商的账号</li></ul><h4 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h4><p>这里以EURUSD为介绍<br>这个货币对叫做欧元/美元，在交易系统上有两个价格 卖价（bid）买价（ask）<br>这个都是对于交易者来说的，也就是ask就是市场上你能买到的最低价,bid就是市场上你能卖的最高价<br>ask &gt;= bid，点差就是ask-bid，点差是可以为0的，例如EURUSD行情比较平缓时，点差为0</p><h4 id="怎么赚钱"><a href="#怎么赚钱" class="headerlink" title="怎么赚钱"></a>怎么赚钱</h4><p>外汇的波动非常小，需要用杠杆放大，交易所会借钱给你，帮你放大波动用于赚钱<br>例如 你有10美元，用2000倍杠杆，此时你如果在1.01254这个价位做空0.01手，交易所会借给你1000美元，你需要用1000/2000 = 0.5美元作为保证金<br>此时如果价格从1.01254波动到1.01200,那么你就用了0.5美金赚到了(1.01254 - 1.01200)*1000 = 0.54美金<br>(这里没有计算点差费用和手续费，用于做一个简单说明)</p><h4 id="这个赚钱吗风险怎样"><a href="#这个赚钱吗风险怎样" class="headerlink" title="这个赚钱吗风险怎样"></a>这个赚钱吗风险怎样</h4><p>依旧以EURUSD为例，它的每小时波动标准差为0.000705641339641201,也就是如果你用2000的杠杆，用0.5美元做保证金，如果赌对了，平均能赚到0.7美元<br>以三个月内的小时线做了分布图</p><img src="/img/forex/forex_pic.png" />大概率都落在0.002的波动范围内，也就是用2000倍杠杆，0.5美金能赚2美金风险有多大呢，如果汇率往另外一个方向波动0.0005不到，你的0.5美金全部消失<h4 id="常见交易方法"><a href="#常见交易方法" class="headerlink" title="常见交易方法"></a>常见交易方法</h4><ol><li><p>MACD/RSI/Bollinger Bands/EMA<br>这一部分我用Python和EA都跑过，模拟盘没有赚到钱</p></li><li><p>滚仓<br>先开一个单，如果盈利了就继续加仓，这个有赚到过一点点</p></li><li><p>马丁策略<br>这个是非常著名的策略，胜率非常高，但是一旦失败，就爆仓，网上有非常多的教程也有现成的<br>我贴一下我的模拟盘净值,分别是失败和成功的</p></li></ol><img src="/img/forex/martin_failed.png" /><img src="/img/forex/martin_success.png" /><h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h4><p><a href="https://github.com/presentzeng/forex">https://github.com/presentzeng/forex</a></p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://www.mql5.com/zh/docs/constants/structures/mqltraderequest">https://www.mql5.com/zh/docs/constants/structures/mqltraderequest</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;外汇投机指南&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Editing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;为什么选外汇&quot;&gt;&lt;a href=&quot;#为什么选外汇&quot; class=&quot;headerlink&quot; title=&quot;为什么选外汇&quot;</summary>
      
    
    
    
    
    <category term="Fun" scheme="https://presentzeng.github.io/tags/Fun/"/>
    
  </entry>
  
  <entry>
    <title>6S081 Study Notes</title>
    <link href="https://presentzeng.github.io/2022/02/01/6S081/"/>
    <id>https://presentzeng.github.io/2022/02/01/6S081/</id>
    <published>2022-01-31T16:00:00.000Z</published>
    <updated>2022-07-16T14:42:24.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction-amp-amp-Link"><a href="#Introduction-amp-amp-Link" class="headerlink" title="Introduction &amp;&amp; Link:"></a>Introduction &amp;&amp; Link:</h1><p>It is a Note about The MIT course 6.S081. arranged by following it’s lab order<br><a href="https://pdos.csail.mit.edu/6.S081/2021/index.html">https://pdos.csail.mit.edu/6.S081/2021/index.html</a><br><a href="https://pdos.csail.mit.edu/6.S081/2021/labs/util.html">https://pdos.csail.mit.edu/6.S081/2021/labs/util.html</a></p><h1 id="Lab1-Utilities"><a href="#Lab1-Utilities" class="headerlink" title="Lab1 Utilities"></a>Lab1 Utilities</h1><h2 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h2><ol><li>The kernel uses the hardware protection mechanisms to ensure that each process executing user space can access only its own memory</li><li>Fork creates a new process, called the child process, with exactly the same memory contents as the calling process</li></ol><h3 id="pingpong"><a href="#pingpong" class="headerlink" title="pingpong"></a>pingpong</h3><ul><li><p>what is the difference of two code block</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int fd[<span class="number">2</span>]<span class="comment">;</span></span><br><span class="line"><span class="attribute">pid</span>=fork()<span class="comment">;</span></span><br><span class="line">pipe(fd)<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pid</span>=fork()<span class="comment">;</span></span><br><span class="line">int fd[<span class="number">2</span>]<span class="comment">;</span></span><br><span class="line">pipe(fd)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>all have 4 fd genereated<br>but the first one two process’s fd have no connection.<br>and the second one has</p></li><li><p>remember to exit at every child process, otherwise it will execute the code below</p></li></ul><h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><ul><li>what is char* a[10]?<blockquote><p>format a =  {char* char* …. char*}</p></blockquote></li><li>exec(command, argv)<blockquote><p>the argv[0] should be not be filled with parameter but with command name</p></blockquote></li><li>there are two types format: “123\n456” and 123 456, how we deal with it.<blockquote><p>we can devide with space of \n and treate “ as one of the char, delete it at the last step</p></blockquote></li><li>we should clear all the uninitial string otherwise we will get random value like “&quot; which will cause a lot of confusion to us<br><img src="/img/1650726024.png" alt="random value"></li><li>if you wanna pass char par[10][10] as a parameter in function you should write prototype like below<blockquote><p>func(char * par[10][10]), that means you should write out the dimension of it</p></blockquote></li><li>what is the difference <blockquote><p>char *par[] = {}; char * par[10] = {}; char *par[10],  the former two are empty array, the last one is the right defination</p></blockquote></li><li>why we should fork and call exec <blockquote><p>exec system call will replace the the calling process, that is why</p></blockquote></li><li>what is the difference between strlen and sizeof<br>pls Do use sizeof with memset</li><li>we can compare char with == but we should compare string by using strcmp</li><li>“” is a string ‘’ is a char</li><li>how to use pointer array properly<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *pass_par[10]; </span><br><span class="line"><span class="keyword">char</span> * <span class="keyword">test</span> = <span class="string">&quot;xargs&quot;</span>;</span><br><span class="line">pass_par[0] = <span class="keyword">test</span>;</span><br><span class="line">printf(<span class="string">&quot;%s\n&quot;</span>, pass_par[0]);</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul><h1 id="Lab2-System-calls"><a href="#Lab2-System-calls" class="headerlink" title="Lab2 System calls"></a>Lab2 System calls</h1><h2 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h2><blockquote><p>mode</p></blockquote><p>Machine<br>mode is mostly intended for configuring a computer</p><p>supervisor mode is for executing privileged instructions: for example, enabling and disabling interrupts, reading and writing the register that holds the address of a page<br>table</p><p>CPUs provide a special instruction that switches the CPU from user mode<br>to supervisor mode. (RISC-V provides<br>the ecall)</p><p>xv6 is monolithic kernel, with all kernel in one mode</p><blockquote><p>Kernel</p></blockquote><p>the hardware only uses the low 39 bits when looking up virtual addresses in page tables; and<br>xv6 only uses 38 of those 39 bits. Thus, the maximum address is 2<br>38 − 1 = 0x3fffffffff</p><p>Each process has two stacks: a user stack and a kernel stack</p><p>In Entry.S it’s _entry set up a stack so that xv6 can run C code start.c</p><h3 id="System-call-tracing"><a href="#System-call-tracing" class="headerlink" title="System call tracing"></a>System call tracing</h3><p>Preparation:</p><ol><li>read at least twice the instructions</li><li>add print command to check the execute order of each function</li><li>you can check how the kill pass all the argument</li></ol><p>Note:</p><ol><li>The most important part is how to pass the argument to the system call</li><li>To read the document, you will know the argument is stored in which Register, and you can use function argint<br>to “Fetch the nth 32-bit system call argument”</li></ol><h3 id="Sysinfo"><a href="#Sysinfo" class="headerlink" title="Sysinfo"></a>Sysinfo</h3><p>Preparation:</p><ol><li>the trick part about the compilation is pls use sys_sysinfo instead of sys_info</li><li>A process’s most important pieces of kernel state are its page table, its kernel<br>stack, and its run state.</li><li>sysinfotest -&gt; kernel/sysproc.c -&gt; kernel/kalloc*proc</li></ol><p>Note:</p><ol><li>The most important part is to understand the function copyout</li><li>for counting proc, we should caculate all the proc that not in UNUSED mode</li><li>for counting mem, we should times the page size</li></ol><h1 id="Lab3-Page-Table"><a href="#Lab3-Page-Table" class="headerlink" title="Lab3  Page Table"></a>Lab3  Page Table</h1><p>Note:</p><ol><li>VA and PA is translated by map</li><li>MMU won’t store any map</li><li>kernel will write the map value into the satp register</li><li>page is 4 KB in the Risk V</li><li>for satp, it is divided into three pieces 25+27+12, 12 is the byte within the page, index is for the map to translate to physical page</li><li>every process keeps it’s own page table</li><li>Kernel is using “direct mapping”</li></ol><p>The Steps to translate the virtual to physical</p><ol><li>the virtual address is devided into PTE-selector and offset, for example 9+9+9(PTE-selector) + 12(Offset)</li><li>for the first page table it is satp + value(first 9 bit), in it we can get the PPN of next page(it’s physical address)</li></ol><h3 id="rewrite-Walk-in-non-recursive-way"><a href="#rewrite-Walk-in-non-recursive-way" class="headerlink" title="rewrite Walk in non recursive way"></a>rewrite Walk in non recursive way</h3><ol><li>pte = page table entries</li><li>ppn = physical table number</li><li>pagetable is an array string like below<br>[pte1, pte2, pte3 …. pte512]</li><li> Each PTE contains a 44-bit physical page<br>number (PPN) and some flags</li><li>Sv39 Risc-V only uses bottom 27 bit for virtual address, that means 27 power of 2 is the max number of PTES</li><li>each pte actually uses 64 bit(8 byte), but it only uses the bottom 54 bits</li><li>each page table has 512 ptes, in total it is 4096 byte</li><li>pte = ppn(44) + flag(12)</li><li>physical address is 56 bit<br>10 last physical address(56) = ppn(44) + Virtual offset(12)</li><li>the middle physical(56)= ppn(44)+ empty zero(12)</li></ol><h3 id="Free-process’s-memory"><a href="#Free-process’s-memory" class="headerlink" title="Free process’s memory"></a>Free process’s memory</h3><ol><li>it should free it’s page table and the physical memory it refers to</li><li>Is only the leaf pagetable has the PTE_R PTE_W flag?</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction-amp-amp-Link&quot;&gt;&lt;a href=&quot;#Introduction-amp-amp-Link&quot; class=&quot;headerlink&quot; title=&quot;Introduction &amp;amp;&amp;amp; Link:&quot;&gt;&lt;/a&gt;Introdu</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://presentzeng.github.io/tags/Linux/"/>
    
    <category term="System" scheme="https://presentzeng.github.io/tags/System/"/>
    
    <category term="OS" scheme="https://presentzeng.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Common Weakness</title>
    <link href="https://presentzeng.github.io/2020/02/21/Common_Weakness/"/>
    <id>https://presentzeng.github.io/2020/02/21/Common_Weakness/</id>
    <published>2020-02-20T16:00:00.000Z</published>
    <updated>2022-04-18T07:28:55.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Common-Weakness"><a href="#Common-Weakness" class="headerlink" title="Common Weakness"></a>Common Weakness</h1><blockquote><p>Editing</p></blockquote><h3 id="Input-validation"><a href="#Input-validation" class="headerlink" title="Input validation"></a>Input validation</h3><p>If we don’t validate input properly, Hacker can alter control flow,  change the code execution, or get the Important file informations</p><p>e.g:<br><a href="https://cwe.mitre.org/data/definitions/790.html">CWE-790</a><br><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116</a><br><a href="https://cwe.mitre.org/data/definitions/138.html">CWE-138</a></p><h3 id="Defense"><a href="#Defense" class="headerlink" title="Defense"></a>Defense</h3><ol><li>Consider all the aspect:Value Type /  Length / Format / Expired Time / Effect Scope and so on</li><li>Assume all input is malicious, Only accept the thing that we know, That means we only set the whiltlist</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Common-Weakness&quot;&gt;&lt;a href=&quot;#Common-Weakness&quot; class=&quot;headerlink&quot; title=&quot;Common Weakness&quot;&gt;&lt;/a&gt;Common Weakness&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Editi</summary>
      
    
    
    
    
    <category term="Security" scheme="https://presentzeng.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Born</title>
    <link href="https://presentzeng.github.io/2000/01/01/Born/"/>
    <id>https://presentzeng.github.io/2000/01/01/Born/</id>
    <published>1999-12-31T16:00:00.000Z</published>
    <updated>2022-04-14T15:35:04.879Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Simple Introduction</strong></p><h4 id="Initial"><a href="#Initial" class="headerlink" title="Initial"></a>Initial</h4><p>“Right at this moment, I was born” – Millennium Bug</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Simple Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;Initial&quot;&gt;&lt;a href=&quot;#Initial&quot; class=&quot;headerlink&quot; title=&quot;Initial&quot;&gt;&lt;/a&gt;Initial&lt;/h4&gt;&lt;p&gt;“Right</summary>
      
    
    
    
    
    <category term="Fun" scheme="https://presentzeng.github.io/tags/Fun/"/>
    
  </entry>
  
</feed>
